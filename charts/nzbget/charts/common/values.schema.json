{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/bjw-s-labs/helm-charts/common-4.1.2/charts/library/common/values.schema.json",
  "type": "object",
  "properties": {
    "global": {
      "description": "Allows for configuring chart-wide settings",
      "type": "object",
      "properties": {
        "nameOverride": {
          "description": "Set the chart name",
          "type": [
            "string",
            "null"
          ]
        },
        "fullnameOverride": {
          "description": "Set the chart fullname definition",
          "type": [
            "string",
            "null"
          ]
        },
        "alwaysAppendIdentifierToResourceName": {
          "description": "Always append identifier slugs to resource names, regardless of the enabled resource count.",
          "type": "boolean",
          "default": false
        },
        "propagateGlobalMetadataToPods": {
          "description": "Set to true to propagate global metadata to Pod labels.",
          "type": "boolean",
          "default": false
        },
        "labels": {
          "description": "Set additional global labels. Helm templates can be used.",
          "type": "object",
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "annotations": {
          "description": "Set additional global annotations. Helm templates can be used.",
          "type": "object",
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      }
    },
    "defaultPodOptionsStrategy": {
      "description": "Set the strategy for the default pod options. Defaults to overwrite.\noverwrite: If pod-level options are set, use those instead of the defaults.\nmerge: If pod-level options are set, merge them with the defaults.",
      "type": "string",
      "default": "overwrite",
      "enum": [
        "overwrite",
        "merge"
      ]
    },
    "defaultPodOptions": {
      "description": "Set default options for all controllers / pods here. Each of these options can be overridden on a controller level.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "affinity": {
          "type": "object",
          "description": "Set affinity constraint rules. Helm templates can be used.\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity",
          "additionalProperties": false,
          "properties": {
            "nodeAffinity": {
              "description": "Describes node affinity scheduling rules for the pod.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                  "items": {
                    "type": "object",
                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                    "additionalProperties": false,
                    "properties": {
                      "preference": {
                        "description": "A node selector term, associated with the corresponding weight.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "items": {
                              "type": "object",
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "items": {
                              "type": "object",
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          }
                        }
                      },
                      "weight": {
                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "weight",
                      "preference"
                    ]
                  },
                  "type": "array"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "nodeSelectorTerms": {
                      "description": "Required. A list of node selector terms. The terms are ORed.",
                      "items": {
                        "type": "object",
                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "items": {
                              "type": "object",
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "items": {
                              "type": "object",
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          }
                        }
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "nodeSelectorTerms"
                  ]
                }
              }
            },
            "podAffinity": {
              "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                  "items": {
                    "type": "object",
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "additionalProperties": false,
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "type": "object",
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ]
                                },
                                "type": "array"
                              },
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object"
                              }
                            }
                          },
                          "matchLabelKeys": {
                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "type": "object",
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ]
                                },
                                "type": "array"
                              },
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object"
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "topologyKey"
                        ]
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "weight",
                      "podAffinityTerm"
                    ]
                  },
                  "type": "array"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "items": {
                    "type": "object",
                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                    "additionalProperties": false,
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "type": "object",
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        }
                      },
                      "matchLabelKeys": {
                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "mismatchLabelKeys": {
                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "namespaceSelector": {
                        "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "type": "object",
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        }
                      },
                      "namespaces": {
                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "topologyKey"
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "podAntiAffinity": {
              "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                  "items": {
                    "type": "object",
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "additionalProperties": false,
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "type": "object",
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ]
                                },
                                "type": "array"
                              },
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object"
                              }
                            }
                          },
                          "matchLabelKeys": {
                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "type": "object",
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ]
                                },
                                "type": "array"
                              },
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object"
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "topologyKey"
                        ]
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "weight",
                      "podAffinityTerm"
                    ]
                  },
                  "type": "array"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "items": {
                    "type": "object",
                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                    "additionalProperties": false,
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "type": "object",
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        }
                      },
                      "matchLabelKeys": {
                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "mismatchLabelKeys": {
                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "namespaceSelector": {
                        "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "type": "object",
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "additionalProperties": false,
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ]
                            },
                            "type": "array"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        }
                      },
                      "namespaces": {
                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "topologyKey"
                    ]
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "annotations": {
          "description": "Annotations to set on the item.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "automountServiceAccountToken": {
          "type": "boolean",
          "default": true,
          "description": "Set to true to automatically mount the service account token."
        },
        "dnsConfig": {
          "type": "object",
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
          "additionalProperties": false,
          "properties": {
            "nameservers": {
              "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "options": {
              "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
              "items": {
                "type": "object",
                "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "description": "Required.",
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              },
              "type": "array"
            },
            "searches": {
              "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "dnsPolicy": {
          "type": "string",
          "description": "Configure the Pod DNS policy. Defaults to 'ClusterFirst' if hostNetwork is false and 'ClusterFirstWithHostNet' if hostNetwork is true."
        },
        "enableServiceLinks": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the generation of environment variables for services.\nSee https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#accessing-the-service"
        },
        "hostAliases": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
            "additionalProperties": false,
            "properties": {
              "hostnames": {
                "description": "Hostnames for the above IP address.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "ip": {
                "description": "IP address of the host file entry.",
                "type": "string"
              }
            }
          },
          "description": "Use hostAliases to add custom entries to /etc/hosts - mapping IP addresses to hostnames.\nSee https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/"
        },
        "hostIPC": {
          "type": "boolean",
          "default": false,
          "description": "Set to true to use the host's ipc namespace."
        },
        "hostNetwork": {
          "type": "boolean",
          "default": false,
          "description": "Set to false to disable host networking on the Pod. When using hostNetwork, make sure you set dnsPolicy to 'ClusterFirstWithHostNet'"
        },
        "hostPID": {
          "type": "boolean",
          "default": false,
          "description": "Set to true to use the host's pid namespace."
        },
        "hostUsers": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Set to false to create a new userns for the Pod. (Requires Kubernetes 1.29 or newer)"
        },
        "hostname": {
          "type": "string",
          "description": "Set the Pod's hostname."
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
            "properties": {
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": "string"
              }
            }
          },
          "description": "Set image pull secrets."
        },
        "labels": {
          "description": "Annotations to set on the item.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": [
              "string"
            ]
          },
          "description": "Node selection constraint.\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector"
        },
        "priorityClassName": {
          "type": "string",
          "description": "Custom priority class for different treatment by the scheduler."
        },
        "resources": {
          "description": "Set the resource requests / limits for the Pod. (Requires Kubernetes 1.32 or newer)",
          "additionalProperties": false,
          "properties": {
            "claims": {
              "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
              "items": {
                "properties": {
                  "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "type": [
                "array",
                "null"
              ]
            },
            "limits": {
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ]
            },
            "requests": {
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ]
            }
          },
          "type": "object"
        },
        "restartPolicy": {
          "type": "string",
          "description": "Set container restart policy. Defaults to 'Always'. When controller.type is 'cronjob' it defaults to 'Never'."
        },
        "runtimeClassName": {
          "type": "string",
          "description": "Set a runtimeClassName other than the default one (ie: `nvidia`)."
        },
        "schedulerName": {
          "type": "string",
          "description": "Set a custom scheduler name."
        },
        "securityContext": {
          "description": "Configure the Security Context for the Pod.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "fsGroup": {
              "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
              "format": "int64",
              "type": "integer"
            },
            "fsGroupChangePolicy": {
              "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.",
              "type": "string"
            },
            "runAsGroup": {
              "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
              "format": "int64",
              "type": "integer"
            },
            "runAsNonRoot": {
              "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
              "type": "boolean"
            },
            "runAsUser": {
              "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
              "format": "int64",
              "type": "integer"
            },
            "seLinuxOptions": {
              "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "level": {
                  "description": "Level is SELinux level label that applies to the container.",
                  "type": "string"
                },
                "role": {
                  "description": "Role is a SELinux role label that applies to the container.",
                  "type": "string"
                },
                "type": {
                  "description": "Type is a SELinux type label that applies to the container.",
                  "type": "string"
                },
                "user": {
                  "description": "User is a SELinux user label that applies to the container.",
                  "type": "string"
                }
              }
            },
            "seccompProfile": {
              "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "localhostProfile": {
                  "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                  "type": "string"
                },
                "type": {
                  "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                  "type": "string"
                }
              },
              "required": [
                "type"
              ]
            },
            "supplementalGroups": {
              "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "sysctls": {
              "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
              "items": {
                "type": "object",
                "description": "Sysctl defines a kernel parameter to be set",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "description": "Name of a property to set",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of a property to set",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              },
              "type": "array"
            }
          }
        },
        "shareProcessNamespace": {
          "type": [
            "boolean",
            "null"
          ],
          "default": false,
          "description": "Allows sharing process namespace between containers in a Pod.\nSee https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/"
        },
        "terminationGracePeriodSeconds": {
          "type": [
            "integer",
            "null"
          ],
          "description": "Duration in seconds the pod needs to terminate gracefully.\nSee https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#lifecycle"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
            "additionalProperties": false,
            "properties": {
              "effect": {
                "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": "string"
              },
              "key": {
                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                "type": "string"
              },
              "operator": {
                "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                "type": "string"
              },
              "tolerationSeconds": {
                "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                "format": "int64",
                "type": "integer"
              },
              "value": {
                "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                "type": "string"
              }
            }
          },
          "description": "Specify taint tolerations.\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/"
        },
        "topologySpreadConstraints": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
            "additionalProperties": false,
            "properties": {
              "labelSelector": {
                "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "items": {
                      "type": "object",
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                      "additionalProperties": false,
                      "properties": {
                        "key": {
                          "description": "key is the label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                          "type": "string"
                        },
                        "values": {
                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "key",
                        "operator"
                      ]
                    },
                    "type": "array"
                  },
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object"
                  }
                }
              },
              "matchLabelKeys": {
                "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                "items": {
                  "type": "string"
                },
                "type": "array",
                "x-kubernetes-list-type": "atomic"
              },
              "maxSkew": {
                "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                "format": "int32",
                "type": "integer"
              },
              "minDomains": {
                "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
                "format": "int32",
                "type": "integer"
              },
              "nodeAffinityPolicy": {
                "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                "type": "string"
              },
              "nodeTaintsPolicy": {
                "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                "type": "string"
              },
              "topologyKey": {
                "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                "type": "string"
              },
              "whenUnsatisfiable": {
                "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                "type": "string"
              }
            },
            "required": [
              "maxSkew",
              "topologyKey",
              "whenUnsatisfiable"
            ]
          },
          "description": "Defines topologySpreadConstraint rules.\nSee https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/"
        }
      }
    },
    "controllers": {
      "description": "Define the Pod controllers to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the controller.",
                "type": "boolean",
                "default": true
              },
              "type": {
                "description": "Controller type. Supported values: deployment, daemonset, statefulset, cronjob, job.",
                "type": "string",
                "enum": [
                  "deployment",
                  "statefulset",
                  "daemonset",
                  "cronjob",
                  "job"
                ],
                "default": "deployment"
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "pod": {
                "description": "Pod-level options for this controller.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "affinity": {
                    "type": "object",
                    "description": "Set affinity constraint rules. Helm templates can be used.\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity",
                    "additionalProperties": false,
                    "properties": {
                      "nodeAffinity": {
                        "description": "Describes node affinity scheduling rules for the pod.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "preferredDuringSchedulingIgnoredDuringExecution": {
                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                            "items": {
                              "type": "object",
                              "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                              "additionalProperties": false,
                              "properties": {
                                "preference": {
                                  "description": "A node selector term, associated with the corresponding weight.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "A list of node selector requirements by node's labels.",
                                      "items": {
                                        "type": "object",
                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "The label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "matchFields": {
                                      "description": "A list of node selector requirements by node's fields.",
                                      "items": {
                                        "type": "object",
                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "The label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    }
                                  }
                                },
                                "weight": {
                                  "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                  "format": "int32",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "weight",
                                "preference"
                              ]
                            },
                            "type": "array"
                          },
                          "requiredDuringSchedulingIgnoredDuringExecution": {
                            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "nodeSelectorTerms": {
                                "description": "Required. A list of node selector terms. The terms are ORed.",
                                "items": {
                                  "type": "object",
                                  "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "A list of node selector requirements by node's labels.",
                                      "items": {
                                        "type": "object",
                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "The label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "matchFields": {
                                      "description": "A list of node selector requirements by node's fields.",
                                      "items": {
                                        "type": "object",
                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "The label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    }
                                  }
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "nodeSelectorTerms"
                            ]
                          }
                        }
                      },
                      "podAffinity": {
                        "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "preferredDuringSchedulingIgnoredDuringExecution": {
                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                            "items": {
                              "type": "object",
                              "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                              "additionalProperties": false,
                              "properties": {
                                "podAffinityTerm": {
                                  "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "items": {
                                            "type": "object",
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "additionalProperties": false,
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "required": [
                                              "key",
                                              "operator"
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        "matchLabels": {
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object"
                                        }
                                      }
                                    },
                                    "matchLabelKeys": {
                                      "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array",
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "mismatchLabelKeys": {
                                      "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array",
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "items": {
                                            "type": "object",
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "additionalProperties": false,
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "required": [
                                              "key",
                                              "operator"
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        "matchLabels": {
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object"
                                        }
                                      }
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "topologyKey"
                                  ]
                                },
                                "weight": {
                                  "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                  "format": "int32",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "weight",
                                "podAffinityTerm"
                              ]
                            },
                            "type": "array"
                          },
                          "requiredDuringSchedulingIgnoredDuringExecution": {
                            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                            "items": {
                              "type": "object",
                              "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                              "additionalProperties": false,
                              "properties": {
                                "labelSelector": {
                                  "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "items": {
                                        "type": "object",
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "matchLabels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object"
                                    }
                                  }
                                },
                                "matchLabelKeys": {
                                  "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "mismatchLabelKeys": {
                                  "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "namespaceSelector": {
                                  "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "items": {
                                        "type": "object",
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "matchLabels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object"
                                    }
                                  }
                                },
                                "namespaces": {
                                  "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "topologyKey": {
                                  "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "topologyKey"
                              ]
                            },
                            "type": "array"
                          }
                        }
                      },
                      "podAntiAffinity": {
                        "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "preferredDuringSchedulingIgnoredDuringExecution": {
                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                            "items": {
                              "type": "object",
                              "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                              "additionalProperties": false,
                              "properties": {
                                "podAffinityTerm": {
                                  "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "items": {
                                            "type": "object",
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "additionalProperties": false,
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "required": [
                                              "key",
                                              "operator"
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        "matchLabels": {
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object"
                                        }
                                      }
                                    },
                                    "matchLabelKeys": {
                                      "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array",
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "mismatchLabelKeys": {
                                      "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array",
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "items": {
                                            "type": "object",
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "additionalProperties": false,
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "required": [
                                              "key",
                                              "operator"
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        "matchLabels": {
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object"
                                        }
                                      }
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "topologyKey"
                                  ]
                                },
                                "weight": {
                                  "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                  "format": "int32",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "weight",
                                "podAffinityTerm"
                              ]
                            },
                            "type": "array"
                          },
                          "requiredDuringSchedulingIgnoredDuringExecution": {
                            "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                            "items": {
                              "type": "object",
                              "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                              "additionalProperties": false,
                              "properties": {
                                "labelSelector": {
                                  "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "items": {
                                        "type": "object",
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "matchLabels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object"
                                    }
                                  }
                                },
                                "matchLabelKeys": {
                                  "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "mismatchLabelKeys": {
                                  "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "namespaceSelector": {
                                  "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "items": {
                                        "type": "object",
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "operator"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "matchLabels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object"
                                    }
                                  }
                                },
                                "namespaces": {
                                  "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "topologyKey": {
                                  "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "topologyKey"
                              ]
                            },
                            "type": "array"
                          }
                        }
                      }
                    }
                  },
                  "annotations": {
                    "description": "Annotations to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "automountServiceAccountToken": {
                    "type": "boolean",
                    "default": true,
                    "description": "Set to true to automatically mount the service account token."
                  },
                  "dnsConfig": {
                    "type": "object",
                    "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
                    "additionalProperties": false,
                    "properties": {
                      "nameservers": {
                        "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "options": {
                        "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
                        "items": {
                          "type": "object",
                          "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "description": "Required.",
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "searches": {
                        "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "dnsPolicy": {
                    "type": "string",
                    "description": "Configure the Pod DNS policy. Defaults to 'ClusterFirst' if hostNetwork is false and 'ClusterFirstWithHostNet' if hostNetwork is true."
                  },
                  "enableServiceLinks": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable/disable the generation of environment variables for services.\nSee https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#accessing-the-service"
                  },
                  "hostAliases": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                      "additionalProperties": false,
                      "properties": {
                        "hostnames": {
                          "description": "Hostnames for the above IP address.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "ip": {
                          "description": "IP address of the host file entry.",
                          "type": "string"
                        }
                      }
                    },
                    "description": "Use hostAliases to add custom entries to /etc/hosts - mapping IP addresses to hostnames.\nSee https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/"
                  },
                  "hostIPC": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to use the host's ipc namespace."
                  },
                  "hostNetwork": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to false to disable host networking on the Pod. When using hostNetwork, make sure you set dnsPolicy to 'ClusterFirstWithHostNet'"
                  },
                  "hostPID": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to use the host's pid namespace."
                  },
                  "hostUsers": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "description": "Set to false to create a new userns for the Pod. (Requires Kubernetes 1.29 or newer)"
                  },
                  "hostname": {
                    "type": "string",
                    "description": "Set the Pod's hostname."
                  },
                  "imagePullSecrets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                      "properties": {
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          "type": "string"
                        }
                      }
                    },
                    "description": "Set image pull secrets."
                  },
                  "labels": {
                    "description": "Annotations to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string"
                      ]
                    },
                    "description": "Node selection constraint.\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector"
                  },
                  "priorityClassName": {
                    "type": "string",
                    "description": "Custom priority class for different treatment by the scheduler."
                  },
                  "resources": {
                    "description": "Set the resource requests / limits for the Pod. (Requires Kubernetes 1.32 or newer)",
                    "additionalProperties": false,
                    "properties": {
                      "claims": {
                        "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                        "items": {
                          "properties": {
                            "name": {
                              "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "limits": {
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "requests": {
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "restartPolicy": {
                    "type": "string",
                    "description": "Set container restart policy. Defaults to 'Always'. When controller.type is 'cronjob' it defaults to 'Never'."
                  },
                  "runtimeClassName": {
                    "type": "string",
                    "description": "Set a runtimeClassName other than the default one (ie: `nvidia`)."
                  },
                  "schedulerName": {
                    "type": "string",
                    "description": "Set a custom scheduler name."
                  },
                  "securityContext": {
                    "description": "Configure the Security Context for the Pod.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "fsGroup": {
                        "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "fsGroupChangePolicy": {
                        "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.",
                        "type": "string"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      },
                      "seccompProfile": {
                        "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "localhostProfile": {
                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      "supplementalGroups": {
                        "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.",
                        "items": {
                          "format": "int64",
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "sysctls": {
                        "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
                        "items": {
                          "type": "object",
                          "description": "Sysctl defines a kernel parameter to be set",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "description": "Name of a property to set",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value of a property to set",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "value"
                          ]
                        },
                        "type": "array"
                      }
                    }
                  },
                  "shareProcessNamespace": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "default": false,
                    "description": "Allows sharing process namespace between containers in a Pod.\nSee https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/"
                  },
                  "terminationGracePeriodSeconds": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "description": "Duration in seconds the pod needs to terminate gracefully.\nSee https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#lifecycle"
                  },
                  "tolerations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                      "additionalProperties": false,
                      "properties": {
                        "effect": {
                          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                          "type": "string"
                        },
                        "key": {
                          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          "type": "string"
                        },
                        "tolerationSeconds": {
                          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "value": {
                          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                          "type": "string"
                        }
                      }
                    },
                    "description": "Specify taint tolerations.\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/"
                  },
                  "topologySpreadConstraints": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                      "additionalProperties": false,
                      "properties": {
                        "labelSelector": {
                          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "items": {
                                "type": "object",
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "additionalProperties": false,
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "key",
                                  "operator"
                                ]
                              },
                              "type": "array"
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object"
                            }
                          }
                        },
                        "matchLabelKeys": {
                          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "atomic"
                        },
                        "maxSkew": {
                          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "minDomains": {
                          "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
                          "format": "int32",
                          "type": "integer"
                        },
                        "nodeAffinityPolicy": {
                          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                          "type": "string"
                        },
                        "nodeTaintsPolicy": {
                          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                          "type": "string"
                        },
                        "topologyKey": {
                          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                          "type": "string"
                        },
                        "whenUnsatisfiable": {
                          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "maxSkew",
                        "topologyKey",
                        "whenUnsatisfiable"
                      ]
                    },
                    "description": "Defines topologySpreadConstraint rules.\nSee https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/"
                  }
                }
              },
              "replicas": {
                "description": "Number of desired pods. Set to null when using a HorizontalPodAutoscaler.",
                "type": [
                  "integer",
                  "null"
                ],
                "default": 1
              },
              "revisionHistoryLimit": {
                "description": "ReplicaSet revision history limit.",
                "type": "integer"
              },
              "rollingUpdate": {
                "description": "Controller upgrade strategy options.",
                "type": "object"
              },
              "strategy": {
                "description": "Controller upgrade strategy.",
                "type": "string"
              },
              "cronjob": {
                "description": "CronJob-specific options. Required when type is cronjob.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "backoffLimit": {
                    "type": "integer",
                    "default": 6
                  },
                  "concurrencyPolicy": {
                    "type": "string",
                    "default": "Forbid"
                  },
                  "failedJobsHistory": {
                    "type": "integer",
                    "default": 1
                  },
                  "parallelism": {
                    "type": "integer"
                  },
                  "schedule": {
                    "type": "string"
                  },
                  "startingDeadlineSeconds": {
                    "type": "integer",
                    "default": 30
                  },
                  "successfulJobsHistory": {
                    "type": "integer",
                    "default": 1
                  },
                  "suspend": {
                    "type": "boolean",
                    "default": false
                  },
                  "timeZone": {
                    "type": "string"
                  },
                  "activeDeadlineSeconds": {
                    "type": "integer"
                  },
                  "ttlSecondsAfterFinished": {
                    "type": "integer"
                  }
                },
                "required": [
                  "schedule"
                ]
              },
              "job": {
                "description": "Job-specific options. Required when type is job.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "backoffLimit": {
                    "type": "integer",
                    "default": 6
                  },
                  "completions": {},
                  "completionMode": {},
                  "parallelism": {
                    "type": "integer"
                  },
                  "suspend": {
                    "type": "boolean",
                    "default": false
                  },
                  "activeDeadlineSeconds": {
                    "type": "integer"
                  },
                  "ttlSecondsAfterFinished": {
                    "type": "integer"
                  }
                }
              },
              "statefulset": {
                "description": "StatefulSet-specific options. Required when type is statefulset.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "podManagementPolicy": {
                    "type": "string"
                  },
                  "persistentVolumeClaimRetentionPolicy": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "whenDeleted": {
                        "type": "string",
                        "enum": [
                          "Delete",
                          "Retain"
                        ],
                        "default": "Retain"
                      },
                      "whenScaled": {
                        "type": "string",
                        "enum": [
                          "Delete",
                          "Retain"
                        ],
                        "default": "Retain"
                      }
                    }
                  },
                  "serviceName": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "identifier": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  },
                  "volumeClaimTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "default": true
                        },
                        "accessMode": {
                          "type": "string"
                        },
                        "advancedMounts": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "path": {
                                  "type": "string"
                                },
                                "readOnly": {
                                  "type": "boolean"
                                },
                                "subPath": {
                                  "type": "string"
                                },
                                "subPathExpr": {
                                  "type": "string"
                                },
                                "mountPropagation": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "annotations": {
                          "description": "Annotations to set on the item.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "dataSource": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "apiGroup": {
                              "type": "string"
                            },
                            "kind": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ]
                        },
                        "dataSourceRef": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "apiGroup": {
                              "type": "string"
                            },
                            "kind": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ]
                        },
                        "globalMounts": {
                          "type": "array",
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "path": {
                                "type": "string"
                              },
                              "readOnly": {
                                "type": "boolean"
                              },
                              "subPath": {
                                "type": "string"
                              },
                              "subPathExpr": {
                                "type": "string"
                              },
                              "mountPropagation": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "labels": {
                          "description": "Labels to set on the item.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "size": {
                          "type": "string"
                        },
                        "storageClass": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "size"
                      ]
                    }
                  }
                }
              },
              "applyDefaultContainerOptionsToInitContainers": {
                "description": "Apply defaultContainerOptions to initContainers.",
                "type": "boolean",
                "default": true
              },
              "defaultContainerOptionsStrategy": {
                "description": "Strategy for default container options.\noverwrite: use container-level options if set.\nmerge: merge container-level options with defaults.",
                "type": "string",
                "default": "overwrite",
                "enum": [
                  "overwrite",
                  "merge"
                ]
              },
              "defaultContainerOptions": {
                "description": "Default options for all (init)Containers. Each can be overridden on a container level.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "args": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "command": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "env": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "description": "Environment variable as a name/value pair.",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "name": {
                                  "description": "Environment variable name.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Environment variable value.",
                                  "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "name",
                                "value"
                              ]
                            },
                            {
                              "description": "Define an environment variable using valueFrom syntax.",
                              "oneOf": [
                                {
                                  "description": "Explicit valueFrom environment variable.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "name": {
                                      "description": "Environment variable name.",
                                      "type": "string"
                                    },
                                    "valueFrom": {
                                      "type": "object",
                                      "description": "Set the valueFrom options for the environment variable.",
                                      "oneOf": [
                                        {
                                          "description": "Reference a field from the pod spec using fieldRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "fieldRef": {
                                              "description": "Selector for a fieldRef.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "apiVersion": {
                                                  "description": "Set the API version for the fieldRef.",
                                                  "type": "string"
                                                },
                                                "fieldPath": {
                                                  "description": "Set the field path for the fieldRef.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "fieldPath"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "fieldRef"
                                          ]
                                        },
                                        {
                                          "description": "Reference a resource field from the pod spec using resourceFieldRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "resourceFieldRef": {
                                              "description": "Selector for a resourceFieldRef.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "containerName": {
                                                  "description": "Set the container name for the resource field reference.",
                                                  "type": "string"
                                                },
                                                "divisor": {
                                                  "description": "Set the divisor for the resource field reference.",
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "resource": {
                                                  "description": "Set the resource name for the resource field reference.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "resource"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "resourceFieldRef"
                                          ]
                                        },
                                        {
                                          "description": "Reference a key from a Secret using secretKeyRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "secretKeyRef": {
                                              "description": "Selector for a key in a Secret or ConfigMap.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "name": {
                                                  "description": "Set the name of the Secret or ConfigMap.",
                                                  "type": "string"
                                                },
                                                "key": {
                                                  "description": "Set the key within the Secret or ConfigMap.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "name",
                                                "key"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "secretKeyRef"
                                          ]
                                        },
                                        {
                                          "description": "Reference a key from a ConfigMap using configMapKeyRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "configMapKeyRef": {
                                              "description": "Selector for a key in a Secret or ConfigMap.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "name": {
                                                  "description": "Set the name of the Secret or ConfigMap.",
                                                  "type": "string"
                                                },
                                                "key": {
                                                  "description": "Set the key within the Secret or ConfigMap.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "name",
                                                "key"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "configMapKeyRef"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "valueFrom"
                                  ]
                                },
                                {
                                  "description": "Implicit valueFrom environment variable.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "name": {
                                      "description": "Environment variable name.",
                                      "type": "string"
                                    },
                                    "fieldRef": {
                                      "description": "Selector for a fieldRef.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "apiVersion": {
                                          "description": "Set the API version for the fieldRef.",
                                          "type": "string"
                                        },
                                        "fieldPath": {
                                          "description": "Set the field path for the fieldRef.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "fieldPath"
                                      ]
                                    },
                                    "resourceFieldRef": {
                                      "description": "Selector for a resourceFieldRef.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "containerName": {
                                          "description": "Set the container name for the resource field reference.",
                                          "type": "string"
                                        },
                                        "divisor": {
                                          "description": "Set the divisor for the resource field reference.",
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "number"
                                            }
                                          ]
                                        },
                                        "resource": {
                                          "description": "Set the resource name for the resource field reference.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "resource"
                                      ]
                                    },
                                    "secretKeyRef": {
                                      "description": "Selector for a key in a Secret or ConfigMap.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "name": {
                                          "description": "Set the name of the Secret or ConfigMap.",
                                          "type": "string"
                                        },
                                        "key": {
                                          "description": "Set the key within the Secret or ConfigMap.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "key"
                                      ]
                                    },
                                    "configMapKeyRef": {
                                      "description": "Selector for a key in a Secret or ConfigMap.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "name": {
                                          "description": "Set the name of the Secret or ConfigMap.",
                                          "type": "string"
                                        },
                                        "key": {
                                          "description": "Set the key within the Secret or ConfigMap.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "key"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "dependencies": {
                                    "fieldRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "resourceFieldRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "fieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "secretKeyRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "fieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "configMapKeyRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "fieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": {
                          "anyOf": [
                            {
                              "description": "Environment variable value.",
                              "type": [
                                "string",
                                "number",
                                "boolean",
                                "null"
                              ]
                            },
                            {
                              "description": "Define an environment variable value as a dictionary item with optional dependencies.",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Environment variable value.",
                                  "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                  ]
                                },
                                "dependsOn": {
                                  "description": "Specify other environment variables that the environment variable depends on.",
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "value"
                              ]
                            },
                            {
                              "oneOf": [
                                {
                                  "description": "Explicit valueFrom environment variable.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "valueFrom": {
                                      "type": "object",
                                      "description": "Set the valueFrom options for the environment variable.",
                                      "oneOf": [
                                        {
                                          "description": "Reference a field from the pod spec using fieldRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "fieldRef": {
                                              "description": "Selector for a fieldRef.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "apiVersion": {
                                                  "description": "Set the API version for the fieldRef.",
                                                  "type": "string"
                                                },
                                                "fieldPath": {
                                                  "description": "Set the field path for the fieldRef.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "fieldPath"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "fieldRef"
                                          ]
                                        },
                                        {
                                          "description": "Reference a resource field from the pod spec using resourceFieldRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "resourceFieldRef": {
                                              "description": "Selector for a resourceFieldRef.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "containerName": {
                                                  "description": "Set the container name for the resource field reference.",
                                                  "type": "string"
                                                },
                                                "divisor": {
                                                  "description": "Set the divisor for the resource field reference.",
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "resource": {
                                                  "description": "Set the resource name for the resource field reference.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "resource"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "resourceFieldRef"
                                          ]
                                        },
                                        {
                                          "description": "Reference a key from a Secret using secretKeyRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "secretKeyRef": {
                                              "description": "Selector for a key in a Secret or ConfigMap.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "name": {
                                                  "description": "Set the name of the Secret or ConfigMap.",
                                                  "type": "string"
                                                },
                                                "key": {
                                                  "description": "Set the key within the Secret or ConfigMap.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "name",
                                                "key"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "secretKeyRef"
                                          ]
                                        },
                                        {
                                          "description": "Reference a key from a ConfigMap using configMapKeyRef syntax.",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "configMapKeyRef": {
                                              "description": "Selector for a key in a Secret or ConfigMap.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "name": {
                                                  "description": "Set the name of the Secret or ConfigMap.",
                                                  "type": "string"
                                                },
                                                "key": {
                                                  "description": "Set the key within the Secret or ConfigMap.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "name",
                                                "key"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "configMapKeyRef"
                                          ]
                                        }
                                      ]
                                    },
                                    "dependsOn": {
                                      "description": "Specify other environment variables that the environment variable depends on.",
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "valueFrom"
                                  ]
                                },
                                {
                                  "description": "Implicit valueFrom environment variable.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "fieldRef": {
                                      "description": "Selector for a fieldRef.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "apiVersion": {
                                          "description": "Set the API version for the fieldRef.",
                                          "type": "string"
                                        },
                                        "fieldPath": {
                                          "description": "Set the field path for the fieldRef.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "fieldPath"
                                      ]
                                    },
                                    "resourceFieldRef": {
                                      "description": "Selector for a resourceFieldRef.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "containerName": {
                                          "description": "Set the container name for the resource field reference.",
                                          "type": "string"
                                        },
                                        "divisor": {
                                          "description": "Set the divisor for the resource field reference.",
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "number"
                                            }
                                          ]
                                        },
                                        "resource": {
                                          "description": "Set the resource name for the resource field reference.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "resource"
                                      ]
                                    },
                                    "secretKeyRef": {
                                      "description": "Selector for a key in a Secret or ConfigMap.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "name": {
                                          "description": "Set the name of the Secret or ConfigMap.",
                                          "type": "string"
                                        },
                                        "key": {
                                          "description": "Set the key within the Secret or ConfigMap.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "key"
                                      ]
                                    },
                                    "configMapKeyRef": {
                                      "description": "Selector for a key in a Secret or ConfigMap.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "name": {
                                          "description": "Set the name of the Secret or ConfigMap.",
                                          "type": "string"
                                        },
                                        "key": {
                                          "description": "Set the key within the Secret or ConfigMap.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "key"
                                      ]
                                    },
                                    "dependsOn": {
                                      "description": "Specify other environment variables that the environment variable depends on.",
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependencies": {
                                    "fieldRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "resourceFieldRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "fieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "secretKeyRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "fieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "configMapKeyRef": {
                                      "allOf": [
                                        {
                                          "not": {
                                            "required": [
                                              "fieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          }
                                        },
                                        {
                                          "not": {
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Define an environment variable using valueFrom syntax (map style)."
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "envFrom": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "configMap": {
                          "type": "string"
                        },
                        "configMapRef": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "identifier": {
                              "type": "string"
                            },
                            "optional": {
                              "type": "boolean"
                            }
                          },
                          "oneOf": [
                            {
                              "required": [
                                "name"
                              ]
                            },
                            {
                              "required": [
                                "identifier"
                              ]
                            }
                          ]
                        },
                        "prefix": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "secret": {
                          "type": "string"
                        },
                        "secretRef": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "identifier": {
                              "type": "string"
                            },
                            "optional": {
                              "type": "boolean"
                            }
                          },
                          "oneOf": [
                            {
                              "required": [
                                "name"
                              ]
                            },
                            {
                              "required": [
                                "identifier"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "image": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent",
                          "Never"
                        ]
                      },
                      "repository": {
                        "type": "string"
                      },
                      "tag": {
                        "type": [
                          "string",
                          "number"
                        ]
                      }
                    }
                  },
                  "resources": {
                    "description": "ResourceRequirements describes the compute resource requirements.",
                    "additionalProperties": false,
                    "properties": {
                      "claims": {
                        "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                        "items": {
                          "properties": {
                            "name": {
                              "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "limits": {
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "requests": {
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "securityContext": {
                    "io.k8s.api.core.v1.SecurityContext": {
                      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                      "properties": {
                        "allowPrivilegeEscalation": {
                          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                          "type": "boolean"
                        },
                        "capabilities": {
                          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.",
                          "properties": {
                            "add": {
                              "description": "Added capabilities",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "drop": {
                              "description": "Removed capabilities",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "privileged": {
                          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                          "type": "boolean"
                        },
                        "procMount": {
                          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                          "type": "string"
                        },
                        "readOnlyRootFilesystem": {
                          "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                          "type": "boolean"
                        },
                        "runAsGroup": {
                          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "runAsNonRoot": {
                          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                          "type": "boolean"
                        },
                        "runAsUser": {
                          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "seLinuxOptions": {
                          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "level": {
                              "description": "Level is SELinux level label that applies to the container.",
                              "type": "string"
                            },
                            "role": {
                              "description": "Role is a SELinux role label that applies to the container.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type is a SELinux type label that applies to the container.",
                              "type": "string"
                            },
                            "user": {
                              "description": "User is a SELinux user label that applies to the container.",
                              "type": "string"
                            }
                          }
                        },
                        "seccompProfile": {
                          "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "localhostProfile": {
                              "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                              "type": "string"
                            },
                            "type": {
                              "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              },
              "initContainers": {
                "description": "InitContainers as dictionary items.",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "description": "Set to false to disable the container.",
                      "type": "boolean",
                      "default": true
                    },
                    "args": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Arguments for the container entrypoint."
                    },
                    "command": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Command for the container entrypoint."
                    },
                    "dependsOn": {
                      "description": "Specify container dependencies to determine render order.",
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "env": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "description": "Environment variable as a name/value pair.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "name": {
                                    "description": "Environment variable name.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Environment variable value.",
                                    "type": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "null"
                                    ]
                                  }
                                },
                                "required": [
                                  "name",
                                  "value"
                                ]
                              },
                              {
                                "description": "Define an environment variable using valueFrom syntax.",
                                "oneOf": [
                                  {
                                    "description": "Explicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "name": {
                                        "description": "Environment variable name.",
                                        "type": "string"
                                      },
                                      "valueFrom": {
                                        "type": "object",
                                        "description": "Set the valueFrom options for the environment variable.",
                                        "oneOf": [
                                          {
                                            "description": "Reference a field from the pod spec using fieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "fieldRef": {
                                                "description": "Selector for a fieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "apiVersion": {
                                                    "description": "Set the API version for the fieldRef.",
                                                    "type": "string"
                                                  },
                                                  "fieldPath": {
                                                    "description": "Set the field path for the fieldRef.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "fieldPath"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "fieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a resource field from the pod spec using resourceFieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "resourceFieldRef": {
                                                "description": "Selector for a resourceFieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "containerName": {
                                                    "description": "Set the container name for the resource field reference.",
                                                    "type": "string"
                                                  },
                                                  "divisor": {
                                                    "description": "Set the divisor for the resource field reference.",
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "number"
                                                      }
                                                    ]
                                                  },
                                                  "resource": {
                                                    "description": "Set the resource name for the resource field reference.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "resource"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a Secret using secretKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "secretKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a ConfigMap using configMapKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "configMapKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "valueFrom"
                                    ]
                                  },
                                  {
                                    "description": "Implicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "name": {
                                        "description": "Environment variable name.",
                                        "type": "string"
                                      },
                                      "fieldRef": {
                                        "description": "Selector for a fieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Set the API version for the fieldRef.",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Set the field path for the fieldRef.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fieldPath"
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selector for a resourceFieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "containerName": {
                                            "description": "Set the container name for the resource field reference.",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Set the divisor for the resource field reference.",
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              }
                                            ]
                                          },
                                          "resource": {
                                            "description": "Set the resource name for the resource field reference.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "resource"
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ],
                                    "dependencies": {
                                      "fieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "anyOf": [
                              {
                                "description": "Environment variable value.",
                                "type": [
                                  "string",
                                  "number",
                                  "boolean",
                                  "null"
                                ]
                              },
                              {
                                "description": "Define an environment variable value as a dictionary item with optional dependencies.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Environment variable value.",
                                    "type": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "null"
                                    ]
                                  },
                                  "dependsOn": {
                                    "description": "Specify other environment variables that the environment variable depends on.",
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              },
                              {
                                "oneOf": [
                                  {
                                    "description": "Explicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "valueFrom": {
                                        "type": "object",
                                        "description": "Set the valueFrom options for the environment variable.",
                                        "oneOf": [
                                          {
                                            "description": "Reference a field from the pod spec using fieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "fieldRef": {
                                                "description": "Selector for a fieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "apiVersion": {
                                                    "description": "Set the API version for the fieldRef.",
                                                    "type": "string"
                                                  },
                                                  "fieldPath": {
                                                    "description": "Set the field path for the fieldRef.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "fieldPath"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "fieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a resource field from the pod spec using resourceFieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "resourceFieldRef": {
                                                "description": "Selector for a resourceFieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "containerName": {
                                                    "description": "Set the container name for the resource field reference.",
                                                    "type": "string"
                                                  },
                                                  "divisor": {
                                                    "description": "Set the divisor for the resource field reference.",
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "number"
                                                      }
                                                    ]
                                                  },
                                                  "resource": {
                                                    "description": "Set the resource name for the resource field reference.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "resource"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a Secret using secretKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "secretKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a ConfigMap using configMapKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "configMapKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        ]
                                      },
                                      "dependsOn": {
                                        "description": "Specify other environment variables that the environment variable depends on.",
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "valueFrom"
                                    ]
                                  },
                                  {
                                    "description": "Implicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "fieldRef": {
                                        "description": "Selector for a fieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Set the API version for the fieldRef.",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Set the field path for the fieldRef.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fieldPath"
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selector for a resourceFieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "containerName": {
                                            "description": "Set the container name for the resource field reference.",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Set the divisor for the resource field reference.",
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              }
                                            ]
                                          },
                                          "resource": {
                                            "description": "Set the resource name for the resource field reference.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "resource"
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      },
                                      "dependsOn": {
                                        "description": "Specify other environment variables that the environment variable depends on.",
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    "dependencies": {
                                      "fieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                "description": "Define an environment variable using valueFrom syntax (map style)."
                              }
                            ]
                          }
                        }
                      ],
                      "description": "Environment variables for the container."
                    },
                    "envFrom": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "configMap": {
                            "type": "string"
                          },
                          "configMapRef": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "identifier": {
                                "type": "string"
                              },
                              "optional": {
                                "type": "boolean"
                              }
                            },
                            "oneOf": [
                              {
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "required": [
                                  "identifier"
                                ]
                              }
                            ]
                          },
                          "prefix": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "secret": {
                            "type": "string"
                          },
                          "secretRef": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "identifier": {
                                "type": "string"
                              },
                              "optional": {
                                "type": "boolean"
                              }
                            },
                            "oneOf": [
                              {
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "required": [
                                  "identifier"
                                ]
                              }
                            ]
                          }
                        }
                      },
                      "description": "Secrets and/or ConfigMaps to load as environment variables."
                    },
                    "image": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent",
                            "Never"
                          ]
                        },
                        "repository": {
                          "type": "string"
                        },
                        "tag": {
                          "type": [
                            "string",
                            "number"
                          ]
                        }
                      },
                      "description": "Image configuration for the container."
                    },
                    "lifecycle": {
                      "description": "Lifecycle event hooks for the container.",
                      "properties": {
                        "postStart": {
                          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies the action to take.",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies the http request to perform.",
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "properties": {
                                      "name": {
                                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "type": "object"
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            },
                            "sleep": {
                              "description": "Sleep represents the duration that the container should sleep before being terminated.",
                              "properties": {
                                "seconds": {
                                  "description": "Seconds is the number of seconds to sleep.",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "seconds"
                              ],
                              "type": "object"
                            },
                            "tcpSocket": {
                              "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "preStop": {
                          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies the action to take.",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies the http request to perform.",
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "properties": {
                                      "name": {
                                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "type": "object"
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            },
                            "sleep": {
                              "description": "Sleep represents the duration that the container should sleep before being terminated.",
                              "properties": {
                                "seconds": {
                                  "description": "Seconds is the number of seconds to sleep.",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "seconds"
                              ],
                              "type": "object"
                            },
                            "tcpSocket": {
                              "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "nameOverride": {
                      "description": "Override the container name.",
                      "type": "string"
                    },
                    "ports": {
                      "description": "Ports to expose from the container.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "containerPort": {
                            "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                            "format": "int32",
                            "type": [
                              "integer",
                              "null"
                            ]
                          },
                          "hostIP": {
                            "description": "What host IP to bind the external port to.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "hostPort": {
                            "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                            "format": "int32",
                            "type": [
                              "integer",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "protocol": {
                            "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "required": [
                          "containerPort"
                        ]
                      }
                    },
                    "probes": {
                      "description": "Probe settings for the container.",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "liveness": {
                          "description": "Liveness probe configuration.",
                          "additionalProperties": false,
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "default": false
                            },
                            "custom": {
                              "type": "boolean",
                              "default": false
                            },
                            "path": {
                              "type": "string"
                            },
                            "port": {
                              "type": [
                                "number",
                                "string"
                              ]
                            },
                            "service": {
                              "type": "string"
                            },
                            "spec": {
                              "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "failureThreshold": {
                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "grpc": {
                                  "description": "GRPC specifies an action involving a GRPC port.",
                                  "properties": {
                                    "port": {
                                      "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                      "format": "int32",
                                      "type": [
                                        "integer",
                                        "null"
                                      ]
                                    },
                                    "service": {
                                      "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                          "name": {
                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "type": "object"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "initialDelaySeconds": {
                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "periodSeconds": {
                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "successThreshold": {
                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "tcpSocket": {
                                  "description": "TCPSocket specifies an action involving a TCP port.",
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "terminationGracePeriodSeconds": {
                                  "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                  "format": "int64",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "timeoutSeconds": {
                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "TCP",
                                "HTTP",
                                "HTTPS",
                                "GRPC",
                                "AUTO"
                              ]
                            }
                          }
                        },
                        "readiness": {
                          "description": "Readiness probe configuration.",
                          "additionalProperties": false,
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "default": false
                            },
                            "custom": {
                              "type": "boolean",
                              "default": false
                            },
                            "path": {
                              "type": "string"
                            },
                            "port": {
                              "type": [
                                "number",
                                "string"
                              ]
                            },
                            "service": {
                              "type": "string"
                            },
                            "spec": {
                              "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "failureThreshold": {
                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "grpc": {
                                  "description": "GRPC specifies an action involving a GRPC port.",
                                  "properties": {
                                    "port": {
                                      "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                      "format": "int32",
                                      "type": [
                                        "integer",
                                        "null"
                                      ]
                                    },
                                    "service": {
                                      "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                          "name": {
                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "type": "object"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "initialDelaySeconds": {
                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "periodSeconds": {
                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "successThreshold": {
                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "tcpSocket": {
                                  "description": "TCPSocket specifies an action involving a TCP port.",
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "terminationGracePeriodSeconds": {
                                  "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                  "format": "int64",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "timeoutSeconds": {
                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "TCP",
                                "HTTP",
                                "HTTPS",
                                "GRPC",
                                "AUTO"
                              ]
                            }
                          }
                        },
                        "startup": {
                          "description": "Startup probe configuration.",
                          "additionalProperties": false,
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "default": false
                            },
                            "custom": {
                              "type": "boolean",
                              "default": false
                            },
                            "path": {
                              "type": "string"
                            },
                            "port": {
                              "type": [
                                "number",
                                "string"
                              ]
                            },
                            "service": {
                              "type": "string"
                            },
                            "spec": {
                              "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "failureThreshold": {
                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "grpc": {
                                  "description": "GRPC specifies an action involving a GRPC port.",
                                  "properties": {
                                    "port": {
                                      "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                      "format": "int32",
                                      "type": [
                                        "integer",
                                        "null"
                                      ]
                                    },
                                    "service": {
                                      "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                          "name": {
                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "type": "object"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "initialDelaySeconds": {
                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "periodSeconds": {
                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "successThreshold": {
                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "tcpSocket": {
                                  "description": "TCPSocket specifies an action involving a TCP port.",
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "terminationGracePeriodSeconds": {
                                  "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                  "format": "int64",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "timeoutSeconds": {
                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "TCP",
                                "HTTP",
                                "HTTPS",
                                "GRPC",
                                "AUTO"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "resources": {
                      "description": "ResourceRequirements describes the compute resource requirements.",
                      "additionalProperties": false,
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "limits": {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "requests": {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "restartPolicy": {
                      "description": "Restart policy for the container.",
                      "type": "string"
                    },
                    "securityContext": {
                      "io.k8s.api.core.v1.SecurityContext": {
                        "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                        "properties": {
                          "allowPrivilegeEscalation": {
                            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                          },
                          "capabilities": {
                            "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.",
                            "properties": {
                              "add": {
                                "description": "Added capabilities",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "drop": {
                                "description": "Removed capabilities",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "privileged": {
                            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                          },
                          "procMount": {
                            "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "string"
                          },
                          "readOnlyRootFilesystem": {
                            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                          },
                          "runAsGroup": {
                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "runAsNonRoot": {
                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "boolean"
                          },
                          "runAsUser": {
                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "seLinuxOptions": {
                            "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "level": {
                                "description": "Level is SELinux level label that applies to the container.",
                                "type": "string"
                              },
                              "role": {
                                "description": "Role is a SELinux role label that applies to the container.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is a SELinux type label that applies to the container.",
                                "type": "string"
                              },
                              "user": {
                                "description": "User is a SELinux user label that applies to the container.",
                                "type": "string"
                              }
                            }
                          },
                          "seccompProfile": {
                            "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "localhostProfile": {
                                "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                "type": "string"
                              },
                              "type": {
                                "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "description": "Security context for the container."
                    },
                    "stdin": {
                      "description": "Keep the standard input open on the container.",
                      "type": "boolean",
                      "default": false
                    },
                    "terminationMessagePath": {
                      "description": "Path for the container's termination message file.",
                      "type": "string"
                    },
                    "terminationMessagePolicy": {
                      "description": "How the container's termination message should be populated. Supported values: 'File', 'FallbackToLogsOnError'.",
                      "type": "string",
                      "enum": [
                        "File",
                        "FallbackToLogsOnError"
                      ]
                    },
                    "tty": {
                      "description": "Allocate a TTY for the container.",
                      "type": "boolean",
                      "default": false
                    },
                    "workingDir": {
                      "description": "Working directory for the container.",
                      "type": "string"
                    }
                  }
                }
              },
              "containers": {
                "description": "Containers as dictionary items.",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "description": "Set to false to disable the container.",
                      "type": "boolean",
                      "default": true
                    },
                    "args": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Arguments for the container entrypoint."
                    },
                    "command": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Command for the container entrypoint."
                    },
                    "dependsOn": {
                      "description": "Specify container dependencies to determine render order.",
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "env": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "description": "Environment variable as a name/value pair.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "name": {
                                    "description": "Environment variable name.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Environment variable value.",
                                    "type": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "null"
                                    ]
                                  }
                                },
                                "required": [
                                  "name",
                                  "value"
                                ]
                              },
                              {
                                "description": "Define an environment variable using valueFrom syntax.",
                                "oneOf": [
                                  {
                                    "description": "Explicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "name": {
                                        "description": "Environment variable name.",
                                        "type": "string"
                                      },
                                      "valueFrom": {
                                        "type": "object",
                                        "description": "Set the valueFrom options for the environment variable.",
                                        "oneOf": [
                                          {
                                            "description": "Reference a field from the pod spec using fieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "fieldRef": {
                                                "description": "Selector for a fieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "apiVersion": {
                                                    "description": "Set the API version for the fieldRef.",
                                                    "type": "string"
                                                  },
                                                  "fieldPath": {
                                                    "description": "Set the field path for the fieldRef.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "fieldPath"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "fieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a resource field from the pod spec using resourceFieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "resourceFieldRef": {
                                                "description": "Selector for a resourceFieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "containerName": {
                                                    "description": "Set the container name for the resource field reference.",
                                                    "type": "string"
                                                  },
                                                  "divisor": {
                                                    "description": "Set the divisor for the resource field reference.",
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "number"
                                                      }
                                                    ]
                                                  },
                                                  "resource": {
                                                    "description": "Set the resource name for the resource field reference.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "resource"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a Secret using secretKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "secretKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a ConfigMap using configMapKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "configMapKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "valueFrom"
                                    ]
                                  },
                                  {
                                    "description": "Implicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "name": {
                                        "description": "Environment variable name.",
                                        "type": "string"
                                      },
                                      "fieldRef": {
                                        "description": "Selector for a fieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Set the API version for the fieldRef.",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Set the field path for the fieldRef.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fieldPath"
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selector for a resourceFieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "containerName": {
                                            "description": "Set the container name for the resource field reference.",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Set the divisor for the resource field reference.",
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              }
                                            ]
                                          },
                                          "resource": {
                                            "description": "Set the resource name for the resource field reference.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "resource"
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ],
                                    "dependencies": {
                                      "fieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "anyOf": [
                              {
                                "description": "Environment variable value.",
                                "type": [
                                  "string",
                                  "number",
                                  "boolean",
                                  "null"
                                ]
                              },
                              {
                                "description": "Define an environment variable value as a dictionary item with optional dependencies.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Environment variable value.",
                                    "type": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "null"
                                    ]
                                  },
                                  "dependsOn": {
                                    "description": "Specify other environment variables that the environment variable depends on.",
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              },
                              {
                                "oneOf": [
                                  {
                                    "description": "Explicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "valueFrom": {
                                        "type": "object",
                                        "description": "Set the valueFrom options for the environment variable.",
                                        "oneOf": [
                                          {
                                            "description": "Reference a field from the pod spec using fieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "fieldRef": {
                                                "description": "Selector for a fieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "apiVersion": {
                                                    "description": "Set the API version for the fieldRef.",
                                                    "type": "string"
                                                  },
                                                  "fieldPath": {
                                                    "description": "Set the field path for the fieldRef.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "fieldPath"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "fieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a resource field from the pod spec using resourceFieldRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "resourceFieldRef": {
                                                "description": "Selector for a resourceFieldRef.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "containerName": {
                                                    "description": "Set the container name for the resource field reference.",
                                                    "type": "string"
                                                  },
                                                  "divisor": {
                                                    "description": "Set the divisor for the resource field reference.",
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "number"
                                                      }
                                                    ]
                                                  },
                                                  "resource": {
                                                    "description": "Set the resource name for the resource field reference.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "resource"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "resourceFieldRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a Secret using secretKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "secretKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "secretKeyRef"
                                            ]
                                          },
                                          {
                                            "description": "Reference a key from a ConfigMap using configMapKeyRef syntax.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "configMapKeyRef": {
                                                "description": "Selector for a key in a Secret or ConfigMap.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "name": {
                                                    "description": "Set the name of the Secret or ConfigMap.",
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "description": "Set the key within the Secret or ConfigMap.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "key"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "configMapKeyRef"
                                            ]
                                          }
                                        ]
                                      },
                                      "dependsOn": {
                                        "description": "Specify other environment variables that the environment variable depends on.",
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "valueFrom"
                                    ]
                                  },
                                  {
                                    "description": "Implicit valueFrom environment variable.",
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "fieldRef": {
                                        "description": "Selector for a fieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Set the API version for the fieldRef.",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Set the field path for the fieldRef.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fieldPath"
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selector for a resourceFieldRef.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "containerName": {
                                            "description": "Set the container name for the resource field reference.",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Set the divisor for the resource field reference.",
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              }
                                            ]
                                          },
                                          "resource": {
                                            "description": "Set the resource name for the resource field reference.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "resource"
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "description": "Selector for a key in a Secret or ConfigMap.",
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "description": "Set the name of the Secret or ConfigMap.",
                                            "type": "string"
                                          },
                                          "key": {
                                            "description": "Set the key within the Secret or ConfigMap.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "key"
                                        ]
                                      },
                                      "dependsOn": {
                                        "description": "Specify other environment variables that the environment variable depends on.",
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    "dependencies": {
                                      "fieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "resourceFieldRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "secretKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "configMapKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "configMapKeyRef": {
                                        "allOf": [
                                          {
                                            "not": {
                                              "required": [
                                                "fieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "resourceFieldRef"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "required": [
                                                "secretKeyRef"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                "description": "Define an environment variable using valueFrom syntax (map style)."
                              }
                            ]
                          }
                        }
                      ],
                      "description": "Environment variables for the container."
                    },
                    "envFrom": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "configMap": {
                            "type": "string"
                          },
                          "configMapRef": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "identifier": {
                                "type": "string"
                              },
                              "optional": {
                                "type": "boolean"
                              }
                            },
                            "oneOf": [
                              {
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "required": [
                                  "identifier"
                                ]
                              }
                            ]
                          },
                          "prefix": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "secret": {
                            "type": "string"
                          },
                          "secretRef": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "identifier": {
                                "type": "string"
                              },
                              "optional": {
                                "type": "boolean"
                              }
                            },
                            "oneOf": [
                              {
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "required": [
                                  "identifier"
                                ]
                              }
                            ]
                          }
                        }
                      },
                      "description": "Secrets and/or ConfigMaps to load as environment variables."
                    },
                    "image": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent",
                            "Never"
                          ]
                        },
                        "repository": {
                          "type": "string"
                        },
                        "tag": {
                          "type": [
                            "string",
                            "number"
                          ]
                        }
                      },
                      "description": "Image configuration for the container."
                    },
                    "lifecycle": {
                      "description": "Lifecycle event hooks for the container.",
                      "properties": {
                        "postStart": {
                          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies the action to take.",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies the http request to perform.",
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "properties": {
                                      "name": {
                                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "type": "object"
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            },
                            "sleep": {
                              "description": "Sleep represents the duration that the container should sleep before being terminated.",
                              "properties": {
                                "seconds": {
                                  "description": "Seconds is the number of seconds to sleep.",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "seconds"
                              ],
                              "type": "object"
                            },
                            "tcpSocket": {
                              "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "preStop": {
                          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies the action to take.",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies the http request to perform.",
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "properties": {
                                      "name": {
                                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "type": "object"
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            },
                            "sleep": {
                              "description": "Sleep represents the duration that the container should sleep before being terminated.",
                              "properties": {
                                "seconds": {
                                  "description": "Seconds is the number of seconds to sleep.",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "seconds"
                              ],
                              "type": "object"
                            },
                            "tcpSocket": {
                              "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "port": {
                                  "type": [
                                    "string",
                                    "integer"
                                  ],
                                  "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                }
                              },
                              "required": [
                                "port"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "nameOverride": {
                      "description": "Override the container name.",
                      "type": "string"
                    },
                    "ports": {
                      "description": "Ports to expose from the container.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "containerPort": {
                            "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                            "format": "int32",
                            "type": [
                              "integer",
                              "null"
                            ]
                          },
                          "hostIP": {
                            "description": "What host IP to bind the external port to.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "hostPort": {
                            "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                            "format": "int32",
                            "type": [
                              "integer",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "protocol": {
                            "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "required": [
                          "containerPort"
                        ]
                      }
                    },
                    "probes": {
                      "description": "Probe settings for the container.",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "liveness": {
                          "description": "Liveness probe configuration.",
                          "additionalProperties": false,
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "default": false
                            },
                            "custom": {
                              "type": "boolean",
                              "default": false
                            },
                            "path": {
                              "type": "string"
                            },
                            "port": {
                              "type": [
                                "number",
                                "string"
                              ]
                            },
                            "service": {
                              "type": "string"
                            },
                            "spec": {
                              "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "failureThreshold": {
                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "grpc": {
                                  "description": "GRPC specifies an action involving a GRPC port.",
                                  "properties": {
                                    "port": {
                                      "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                      "format": "int32",
                                      "type": [
                                        "integer",
                                        "null"
                                      ]
                                    },
                                    "service": {
                                      "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                          "name": {
                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "type": "object"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "initialDelaySeconds": {
                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "periodSeconds": {
                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "successThreshold": {
                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "tcpSocket": {
                                  "description": "TCPSocket specifies an action involving a TCP port.",
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "terminationGracePeriodSeconds": {
                                  "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                  "format": "int64",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "timeoutSeconds": {
                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "TCP",
                                "HTTP",
                                "HTTPS",
                                "GRPC",
                                "AUTO"
                              ]
                            }
                          }
                        },
                        "readiness": {
                          "description": "Readiness probe configuration.",
                          "additionalProperties": false,
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "default": false
                            },
                            "custom": {
                              "type": "boolean",
                              "default": false
                            },
                            "path": {
                              "type": "string"
                            },
                            "port": {
                              "type": [
                                "number",
                                "string"
                              ]
                            },
                            "service": {
                              "type": "string"
                            },
                            "spec": {
                              "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "failureThreshold": {
                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "grpc": {
                                  "description": "GRPC specifies an action involving a GRPC port.",
                                  "properties": {
                                    "port": {
                                      "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                      "format": "int32",
                                      "type": [
                                        "integer",
                                        "null"
                                      ]
                                    },
                                    "service": {
                                      "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                          "name": {
                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "type": "object"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "initialDelaySeconds": {
                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "periodSeconds": {
                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "successThreshold": {
                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "tcpSocket": {
                                  "description": "TCPSocket specifies an action involving a TCP port.",
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "terminationGracePeriodSeconds": {
                                  "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                  "format": "int64",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "timeoutSeconds": {
                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "TCP",
                                "HTTP",
                                "HTTPS",
                                "GRPC",
                                "AUTO"
                              ]
                            }
                          }
                        },
                        "startup": {
                          "description": "Startup probe configuration.",
                          "additionalProperties": false,
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "default": false
                            },
                            "custom": {
                              "type": "boolean",
                              "default": false
                            },
                            "path": {
                              "type": "string"
                            },
                            "port": {
                              "type": [
                                "number",
                                "string"
                              ]
                            },
                            "service": {
                              "type": "string"
                            },
                            "spec": {
                              "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "failureThreshold": {
                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "grpc": {
                                  "description": "GRPC specifies an action involving a GRPC port.",
                                  "properties": {
                                    "port": {
                                      "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                      "format": "int32",
                                      "type": [
                                        "integer",
                                        "null"
                                      ]
                                    },
                                    "service": {
                                      "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                          "name": {
                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "type": "object"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "initialDelaySeconds": {
                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "periodSeconds": {
                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "successThreshold": {
                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "tcpSocket": {
                                  "description": "TCPSocket specifies an action involving a TCP port.",
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "port": {
                                      "type": [
                                        "string",
                                        "integer"
                                      ],
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                  },
                                  "required": [
                                    "port"
                                  ],
                                  "type": "object"
                                },
                                "terminationGracePeriodSeconds": {
                                  "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                  "format": "int64",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                },
                                "timeoutSeconds": {
                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                  "format": "int32",
                                  "type": [
                                    "integer",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "TCP",
                                "HTTP",
                                "HTTPS",
                                "GRPC",
                                "AUTO"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "resources": {
                      "description": "ResourceRequirements describes the compute resource requirements.",
                      "additionalProperties": false,
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "limits": {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "requests": {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "restartPolicy": {
                      "description": "Restart policy for the container.",
                      "type": "string"
                    },
                    "securityContext": {
                      "io.k8s.api.core.v1.SecurityContext": {
                        "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                        "properties": {
                          "allowPrivilegeEscalation": {
                            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                          },
                          "capabilities": {
                            "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.",
                            "properties": {
                              "add": {
                                "description": "Added capabilities",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "drop": {
                                "description": "Removed capabilities",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "privileged": {
                            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                          },
                          "procMount": {
                            "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "string"
                          },
                          "readOnlyRootFilesystem": {
                            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                          },
                          "runAsGroup": {
                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "runAsNonRoot": {
                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "boolean"
                          },
                          "runAsUser": {
                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "seLinuxOptions": {
                            "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "level": {
                                "description": "Level is SELinux level label that applies to the container.",
                                "type": "string"
                              },
                              "role": {
                                "description": "Role is a SELinux role label that applies to the container.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is a SELinux type label that applies to the container.",
                                "type": "string"
                              },
                              "user": {
                                "description": "User is a SELinux user label that applies to the container.",
                                "type": "string"
                              }
                            }
                          },
                          "seccompProfile": {
                            "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "localhostProfile": {
                                "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                "type": "string"
                              },
                              "type": {
                                "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "description": "Security context for the container."
                    },
                    "stdin": {
                      "description": "Keep the standard input open on the container.",
                      "type": "boolean",
                      "default": false
                    },
                    "terminationMessagePath": {
                      "description": "Path for the container's termination message file.",
                      "type": "string"
                    },
                    "terminationMessagePolicy": {
                      "description": "How the container's termination message should be populated. Supported values: 'File', 'FallbackToLogsOnError'.",
                      "type": "string",
                      "enum": [
                        "File",
                        "FallbackToLogsOnError"
                      ]
                    },
                    "tty": {
                      "description": "Allocate a TTY for the container.",
                      "type": "boolean",
                      "default": false
                    },
                    "workingDir": {
                      "description": "Working directory for the container.",
                      "type": "string"
                    }
                  }
                }
              },
              "serviceAccount": {
                "description": "ServiceAccount used by the controller.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Reference a serviceAccount by its name. Helm templates are supported.",
                    "type": "string"
                  },
                  "identifier": {
                    "description": "Reference a serviceAccount configured in this chart by its key.",
                    "type": "string"
                  }
                }
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "deployment"
                    }
                  }
                },
                "then": {
                  "not": {
                    "anyOf": [
                      {
                        "required": [
                          "statefulset"
                        ]
                      },
                      {
                        "required": [
                          "cronjob"
                        ]
                      },
                      {
                        "required": [
                          "job"
                        ]
                      },
                      {
                        "required": [
                          "daemonset"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "statefulset"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "then": {
                  "not": {
                    "anyOf": [
                      {
                        "required": [
                          "cronjob"
                        ]
                      },
                      {
                        "required": [
                          "job"
                        ]
                      },
                      {
                        "required": [
                          "daemonset"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "cronjob"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "then": {
                  "allOf": [
                    {
                      "not": {
                        "anyOf": [
                          {
                            "required": [
                              "statefulset"
                            ]
                          },
                          {
                            "required": [
                              "job"
                            ]
                          },
                          {
                            "required": [
                              "daemonset"
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "required": [
                        "cronjob"
                      ]
                    }
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "job"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "then": {
                  "not": {
                    "anyOf": [
                      {
                        "required": [
                          "statefulset"
                        ]
                      },
                      {
                        "required": [
                          "cronjob"
                        ]
                      },
                      {
                        "required": [
                          "daemonset"
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          }
        ]
      }
    },
    "serviceAccount": {
      "description": "Kubernetes serviceAccount objects to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the ServiceAccount.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "staticToken": {
                "description": "Set to true to create a long-lived static token for the ServiceAccount.",
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      }
    },
    "configMaps": {
      "description": "Kubernetes ConfigMaps to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the ConfigMap.",
                "type": "boolean",
                "default": true
              },
              "includeInChecksum": {
                "description": "Set to true to include this ConfigMap in the checksum calculation for rolling updates.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "data": {
                "description": "ConfigMap data content. Helm templates are supported.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "binaryData": {
                "description": "ConfigMap binaryData content.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "oneOf": [
              {
                "required": [
                  "data"
                ]
              },
              {
                "required": [
                  "binaryData"
                ]
              }
            ]
          }
        ]
      }
    },
    "secrets": {
      "description": "Kubernetes Secrets to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the Secret.",
                "type": "boolean",
                "default": true
              },
              "includeInChecksum": {
                "description": "Set to true to include this Secret in the checksum calculation for rolling updates.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": {
                "description": "Secret type.",
                "type": "string"
              },
              "stringData": {
                "description": "Secret stringData content. Helm templates are supported.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "stringData"
            ]
          }
        ]
      }
    },
    "ingress": {
      "description": "Kubernetes Ingress objects to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the Ingress.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "className": {
                "description": "Set the ingressClass used for this Ingress.",
                "type": "string"
              },
              "defaultBackend": {
                "description": "Set the defaultBackend for this Ingress. This disables any other rules.",
                "properties": {
                  "resource": {
                    "description": "resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\".",
                    "properties": {
                      "apiGroup": {
                        "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the type of resource being referenced",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the name of resource being referenced",
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "name"
                    ],
                    "type": "object"
                  },
                  "service": {
                    "description": "service references a service as a backend. This is a mutually exclusive setting with \"Resource\".",
                    "properties": {
                      "name": {
                        "description": "name is the referenced service. The service must exist in the same namespace as the Ingress object.",
                        "type": "string"
                      },
                      "port": {
                        "description": "port of the referenced service. A port name or port number is required for a IngressServiceBackend.",
                        "properties": {
                          "name": {
                            "description": "name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".",
                            "type": "string"
                          },
                          "number": {
                            "description": "number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".",
                            "format": "int32",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "hosts": {
                "description": "Configure the hosts for the Ingress.",
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "host": {
                      "description": "Set the host address. Helm templates are supported.",
                      "type": "string"
                    },
                    "paths": {
                      "description": "Configure the paths for the host.",
                      "type": "array",
                      "title": "paths",
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "pathType": {
                            "type": "string",
                            "default": "Prefix"
                          },
                          "service": {
                            "oneOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "type": [
                                      "integer"
                                    ]
                                  }
                                },
                                "required": [
                                  "name",
                                  "port"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "identifier": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "type": [
                                      "string",
                                      "integer"
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "host",
                    "paths"
                  ]
                }
              },
              "tls": {
                "description": "Configure TLS for the Ingress.",
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "hosts": {
                      "description": "Set the hosts for the TLS entry. Helm templates are supported.",
                      "type": "array",
                      "items": {
                        "type": [
                          "string"
                        ]
                      }
                    },
                    "secretName": {
                      "description": "Set the secretName for the TLS entry. Helm templates are supported.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "hosts"
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "route": {
      "description": "Kubernetes Gateway API *Route objects to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the Route.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "hostnames": {
                "description": "Host addresses for the Route. Helm templates are supported.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "kind": {
                "description": "Route kind. Supported values: GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute.",
                "type": "string",
                "enum": [
                  "GRPCRoute",
                  "HTTPRoute",
                  "TCPRoute",
                  "TLSRoute",
                  "UDPRoute"
                ]
              },
              "parentRefs": {
                "description": "Resource the Route attaches to.",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "group": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string"
                    },
                    "namespace": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "sectionName": {
                      "type": "string"
                    },
                    "port": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "rules": {
                "description": "Rules for routing. Defaults to the primary service.",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "backendRefs": {
                      "description": "Backend references.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "group": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "name": {
                            "description": "Reference to a backend Service name.",
                            "type": "string"
                          },
                          "identifier": {
                            "description": "Reference to a service identifier defined within the chart values.",
                            "type": "string"
                          },
                          "port": {
                            "type": [
                              "string",
                              "integer"
                            ]
                          },
                          "weight": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "matches": {
                      "description": "Match rules.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "path": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "filters": {
                      "description": "Filters for the route.",
                      "type": "array",
                      "items": {}
                    },
                    "sessionPersistence": {
                      "description": "SessionPersistence defines the desired state of SessionPersistence.",
                      "type": "object"
                    },
                    "timeouts": {
                      "description": "Timeouts for the route.",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "service": {
      "description": "Kubernetes Service objects to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the Service.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": {
                "description": "Service type. Supported values: ClusterIP, NodePort, LoadBalancer, ExternalName.",
                "type": "string",
                "enum": [
                  "ClusterIP",
                  "NodePort",
                  "LoadBalancer",
                  "ExternalName"
                ]
              },
              "clusterIP": {
                "type": "string"
              },
              "externalName": {
                "type": "string"
              },
              "loadBalancerIP": {
                "type": "string"
              },
              "loadBalancerSourceRanges": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "loadBalancerClass": {
                "type": "string"
              },
              "internalTrafficPolicy": {
                "description": "internalTrafficPolicy for the Service. Supported values: Cluster, Local.\nSee https://kubernetes.io/docs/concepts/services-networking/service-traffic-policy/",
                "type": "string",
                "enum": [
                  "Cluster",
                  "Local"
                ]
              },
              "externalTrafficPolicy": {
                "description": "externalTrafficPolicy for the Service. Supported values: Cluster, Local.\nSee https://kubernetes.io/docs/tutorials/services/source-ip/",
                "type": "string",
                "enum": [
                  "Cluster",
                  "Local"
                ]
              },
              "allocateLoadBalancerNodePorts": {
                "type": "boolean"
              },
              "sessionAffinity": {
                "type": "string",
                "enum": [
                  "None",
                  "ClientIP"
                ]
              },
              "sessionAffinityConfig": {
                "type": "object"
              },
              "externalIPs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "publishNotReadyAddresses": {
                "type": "boolean"
              },
              "ipFamilyPolicy": {
                "description": "ipFamilyPolicy for the Service. Supported values: SingleStack, PreferDualStack, RequireDualStack.",
                "type": "string",
                "enum": [
                  "SingleStack",
                  "PreferDualStack",
                  "RequireDualStack"
                ]
              },
              "ipFamilies": {
                "description": "IP families for the Service. Supported values: IPv4, IPv6.",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "IPv4",
                    "IPv6"
                  ]
                }
              },
              "controller": {
                "description": "Controller this Service should target.",
                "type": "string"
              },
              "primary": {
                "description": "Set to true to make this the primary Service for the controller (used in probes, notes, etc). Only one Service can be marked as primary.",
                "type": "boolean",
                "default": false
              },
              "extraSelectorLabels": {
                "description": "Additional match labels for the Service selector."
              },
              "ports": {
                "description": "Service port(s) configuration.",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "description": "Set to false to disable the port.",
                      "type": "boolean",
                      "default": true
                    },
                    "primary": {
                      "description": "Set to true to make this the primary port (used in probes, notes, etc).\nOnly one port can be marked as primary.",
                      "type": "boolean",
                      "default": false
                    },
                    "port": {
                      "description": "Port name / number.",
                      "type": [
                        "string",
                        "integer"
                      ]
                    },
                    "protocol": {
                      "description": "Port protocol. Supported values: HTTP, HTTPS, TCP, UDP.\nHTTP and HTTPS spawn a TCP service and are used for internal URL and name generation.",
                      "type": "string",
                      "enum": [
                        "HTTP",
                        "HTTPS",
                        "TCP",
                        "UDP"
                      ]
                    },
                    "targetPort": {
                      "description": "Set the targetPort if you want the Service port to differ from the application port. If set, this value is used in the container definition instead of 'port'.\nNamed ports are not supported for this field.",
                      "type": [
                        "string",
                        "integer"
                      ]
                    },
                    "nodePort": {
                      "description": "nodePort value for LoadBalancer and NodePort Service types.\nSee https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
                      "type": [
                        "string",
                        "integer"
                      ]
                    },
                    "appProtocol": {
                      "description": "appProtocol value for the port.\nSee https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol",
                      "type": "string"
                    }
                  },
                  "required": [
                    "port"
                  ]
                }
              }
            },
            "required": []
          }
        ]
      }
    },
    "serviceMonitor": {
      "description": "serviceMonitor objects to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the ServiceMonitor.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "endpoints": {
                "description": "Endpoints allowed as part of this ServiceMonitor.",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "selector": {
                "description": "Selector to select Endpoints objects.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "operator": {
                          "type": "string"
                        },
                        "values": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "service": {
                "description": "Service to monitor. Either 'serviceName' or 'service' must be specified.",
                "oneOf": [
                  {
                    "description": "Reference to a Service name. Helm templates are supported.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  {
                    "description": "Reference to a service identifier defined within the chart values.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "identifier": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "identifier"
                    ]
                  }
                ]
              },
              "serviceName": {
                "description": "Reference to a Service name to monitor. Helm templates are supported. Deprecated in favor of 'service'.",
                "type": "string",
                "deprecated": true
              },
              "targetLabels": {
                "description": "Transfers labels from the Kubernetes Service onto the created metrics.",
                "type": "array"
              }
            },
            "dependencies": {
              "selector": {
                "not": {
                  "required": [
                    "serviceName",
                    "service"
                  ]
                }
              },
              "serviceName": {
                "not": {
                  "required": [
                    "selector",
                    "service"
                  ]
                }
              },
              "service": {
                "not": {
                  "required": [
                    "selector",
                    "serviceName"
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "networkpolicies": {
      "description": "networkPolicy objects to be generated by the chart",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the NetworkPolicy.",
                "type": "boolean",
                "default": true
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "controller": {
                "description": "Controller this NetworkPolicy should target.",
                "type": "string"
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "podSelector": {
                "description": "Custom podSelector for the NetworkPolicy. Takes precedence over targeting a controller."
              },
              "policyTypes": {
                "description": "Policy types for the NetworkPolicy.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "rules": {
                "description": "Ingress and egress rules for the NetworkPolicy.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "ingress": {
                    "type": "array",
                    "items": {
                      "description": "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
                      "properties": {
                        "from": {
                          "description": "from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.",
                          "items": {
                            "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed",
                            "properties": {
                              "ipBlock": {
                                "description": "ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
                                "properties": {
                                  "cidr": {
                                    "description": "cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"",
                                    "type": "string"
                                  },
                                  "except": {
                                    "description": "except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "cidr"
                                ],
                                "type": "object"
                              },
                              "namespaceSelector": {
                                "description": "namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "items": {
                                      "type": "object",
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "additionalProperties": false,
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "operator"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "matchLabels": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object"
                                  }
                                }
                              },
                              "podSelector": {
                                "description": "podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "items": {
                                      "type": "object",
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "additionalProperties": false,
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "operator"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "matchLabels": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object"
                                  }
                                }
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "ports": {
                          "description": "ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
                          "items": {
                            "description": "NetworkPolicyPort describes a port to allow traffic on",
                            "properties": {
                              "endPort": {
                                "description": "endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "port": {
                                "type": [
                                  "string",
                                  "integer"
                                ],
                                "description": "port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched."
                              },
                              "protocol": {
                                "description": "protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "egress": {
                    "type": "array",
                    "items": {
                      "description": "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
                      "properties": {
                        "ports": {
                          "description": "ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
                          "items": {
                            "description": "NetworkPolicyPort describes a port to allow traffic on",
                            "properties": {
                              "endPort": {
                                "description": "endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "port": {
                                "type": [
                                  "string",
                                  "integer"
                                ],
                                "description": "port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched."
                              },
                              "protocol": {
                                "description": "protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "to": {
                          "description": "to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
                          "items": {
                            "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed",
                            "properties": {
                              "ipBlock": {
                                "description": "ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
                                "properties": {
                                  "cidr": {
                                    "description": "cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"",
                                    "type": "string"
                                  },
                                  "except": {
                                    "description": "except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "cidr"
                                ],
                                "type": "object"
                              },
                              "namespaceSelector": {
                                "description": "namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "items": {
                                      "type": "object",
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "additionalProperties": false,
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "operator"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "matchLabels": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object"
                                  }
                                }
                              },
                              "podSelector": {
                                "description": "podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "items": {
                                      "type": "object",
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "additionalProperties": false,
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "operator"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "matchLabels": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object"
                                  }
                                }
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              }
            },
            "required": [
              "rules"
            ]
          }
        ]
      }
    },
    "persistence": {
      "description": "Options to configure persistent storage and mount options",
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "forceRename": {
                    "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                    "type": "string"
                  },
                  "prefix": {
                    "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                    "type": "string",
                    "default": ""
                  },
                  "suffix": {
                    "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                    "type": "string"
                  }
                },
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "forceRename",
                        "suffix"
                      ]
                    },
                    {
                      "required": [
                        "forceRename",
                        "prefix"
                      ]
                    }
                  ]
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "const": "persistentVolumeClaim"
                  },
                  "forceRename": {},
                  "prefix": {},
                  "suffix": {},
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Set to false to disable the persistence item."
                  },
                  "accessMode": {
                    "type": "string",
                    "description": "AccessMode for the persistent volume. Make sure to select an access mode that is supported by your storage provider!\nSee https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes"
                  },
                  "annotations": {
                    "description": "Annotations to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "dataSource": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "apiGroup": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "name"
                    ],
                    "description": "The optional data source for the persistentVolumeClaim.\nSee https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-populators-and-data-sources"
                  },
                  "dataSourceRef": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "apiGroup": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "name"
                    ],
                    "description": "The optional volume populator for the persistentVolumeClaim.\nSee https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-populators-and-data-sources"
                  },
                  "labels": {
                    "description": "Labels to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "retain": {
                    "type": "boolean",
                    "description": "Set to true to retain the PVC upon helm uninstall."
                  },
                  "size": {
                    "type": "string",
                    "description": "The amount of storage that is requested for the persistent volume."
                  },
                  "storageClass": {
                    "type": "string",
                    "description": "Storage Class for the config volume.\nIf set to '-', dynamic provisioning is disabled.\nIf set to something else, the given storageClass is used.\nIf undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner."
                  },
                  "volumeName": {
                    "type": "string"
                  },
                  "advancedMounts": {
                    "description": "Explicitly configure mounts for specific controllers and containers.\nSee https://bjw-s-labs.github.io/helm-charts/docs/common-library/storage/globalOptions/#advancedmounts",
                    "additionalProperties": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "path": {
                              "type": "string"
                            },
                            "readOnly": {
                              "type": "boolean"
                            },
                            "subPath": {
                              "type": "string"
                            },
                            "subPathExpr": {
                              "type": "string"
                            },
                            "mountPropagation": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "globalMounts": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "Configure mounts to all controllers and containers.\nBy default the persistence item will be mounted to /<name_of_the_peristence_item>.\nSee https://bjw-s-labs.github.io/helm-charts/docs/common-library/storage/globalOptions/#globalmounts"
                  }
                },
                "required": [
                  "accessMode",
                  "size"
                ]
              }
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "const": "persistentVolumeClaim"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              },
              "existingClaim": {
                "type": "string"
              },
              "advancedMounts": {
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "globalMounts": {
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "subPath": {
                      "type": "string"
                    },
                    "subPathExpr": {
                      "type": "string"
                    },
                    "mountPropagation": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "required": [
              "existingClaim"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "const": "configMap"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              },
              "name": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "defaultMode": {
                "type": "integer",
                "format": "int32"
              },
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "mode": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "path": {
                      "type": "string"
                    }
                  }
                }
              },
              "advancedMounts": {
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "globalMounts": {
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "subPath": {
                      "type": "string"
                    },
                    "subPathExpr": {
                      "type": "string"
                    },
                    "mountPropagation": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "oneOf": [
              {
                "required": [
                  "name"
                ]
              },
              {
                "required": [
                  "identifier"
                ]
              }
            ],
            "dependencies": {
              "name": {
                "not": {
                  "required": [
                    "identifier"
                  ]
                }
              },
              "identifier": {
                "not": {
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "const": "secret"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              },
              "name": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "defaultMode": {
                "type": "integer",
                "format": "int32"
              },
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "mode": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "path": {
                      "type": "string"
                    }
                  }
                }
              },
              "advancedMounts": {
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "globalMounts": {
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "subPath": {
                      "type": "string"
                    },
                    "subPathExpr": {
                      "type": "string"
                    },
                    "mountPropagation": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "oneOf": [
              {
                "required": [
                  "name"
                ]
              },
              {
                "required": [
                  "identifier"
                ]
              }
            ],
            "dependencies": {
              "name": {
                "not": {
                  "required": [
                    "identifier"
                  ]
                }
              },
              "identifier": {
                "not": {
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "const": "nfs"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              },
              "path": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "advancedMounts": {
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "globalMounts": {
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "subPath": {
                      "type": "string"
                    },
                    "subPathExpr": {
                      "type": "string"
                    },
                    "mountPropagation": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "required": [
              "server",
              "path"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "const": "emptyDir"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              },
              "medium": {
                "type": "string"
              },
              "sizeLimit": {
                "type": "string"
              },
              "advancedMounts": {
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "globalMounts": {
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "subPath": {
                      "type": "string"
                    },
                    "subPathExpr": {
                      "type": "string"
                    },
                    "mountPropagation": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "const": "hostPath"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              },
              "hostPath": {
                "type": "string"
              },
              "hostPathType": {
                "type": "string"
              },
              "advancedMounts": {
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "globalMounts": {
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "subPath": {
                      "type": "string"
                    },
                    "subPathExpr": {
                      "type": "string"
                    },
                    "mountPropagation": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "const": "custom"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              },
              "volumeSpec": {
                "type": "object"
              },
              "globalMounts": {
                "type": "array",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "subPath": {
                      "type": "string"
                    },
                    "subPathExpr": {
                      "type": "string"
                    },
                    "mountPropagation": {
                      "type": "string"
                    }
                  }
                }
              },
              "advancedMounts": {
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "readOnly": {
                          "type": "boolean"
                        },
                        "subPath": {
                          "type": "string"
                        },
                        "subPathExpr": {
                          "type": "string"
                        },
                        "mountPropagation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "volumeSpec"
            ]
          }
        ]
      }
    },
    "rbac": {
      "description": "Configure the Roles and Role Bindings for the chart here",
      "type": "object",
      "properties": {
        "roles": {
          "description": "(Cluster)Role objects to be generated by the chart",
          "type": "object",
          "additionalProperties": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "forceRename": {
                    "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                    "type": "string"
                  },
                  "prefix": {
                    "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                    "type": "string",
                    "default": ""
                  },
                  "suffix": {
                    "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                    "type": "string"
                  }
                },
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "forceRename",
                        "suffix"
                      ]
                    },
                    {
                      "required": [
                        "forceRename",
                        "prefix"
                      ]
                    }
                  ]
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "forceRename": {},
                  "prefix": {},
                  "suffix": {},
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Set to false to disable the Role or ClusterRole."
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "Role",
                      "ClusterRole"
                    ],
                    "default": "Role",
                    "description": "Set the type of RBAC resource. Supported values: Role, ClusterRole."
                  },
                  "annotations": {
                    "description": "Annotations to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "labels": {
                    "description": "Labels to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "rules": {
                    "type": "array",
                    "description": "Set the rules for the Role or ClusterRole."
                  }
                },
                "required": [
                  "type",
                  "rules"
                ]
              }
            ]
          }
        },
        "bindings": {
          "description": "(Cluster)RoleBinding objects to be generated by the chart",
          "type": "object",
          "additionalProperties": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "forceRename": {
                    "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                    "type": "string"
                  },
                  "prefix": {
                    "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                    "type": "string",
                    "default": ""
                  },
                  "suffix": {
                    "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                    "type": "string"
                  }
                },
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "forceRename",
                        "suffix"
                      ]
                    },
                    {
                      "required": [
                        "forceRename",
                        "prefix"
                      ]
                    }
                  ]
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "forceRename": {},
                  "prefix": {},
                  "suffix": {},
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Set to false to disable the RoleBinding or ClusterRoleBinding."
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "RoleBinding",
                      "ClusterRoleBinding"
                    ],
                    "default": "RoleBinding",
                    "description": "Set the type of RBAC binding. Supported values: RoleBinding, ClusterRoleBinding."
                  },
                  "annotations": {
                    "description": "Annotations to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "labels": {
                    "description": "Labels to set on the item.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "roleRef": {
                    "type": "object",
                    "description": "Reference the Role or ClusterRole to bind to.",
                    "properties": {
                      "identifier": {
                        "type": "string",
                        "description": "Reference an Role or ClusterRole configured in this chart by its key."
                      },
                      "name": {
                        "type": "string",
                        "description": "Reference a Role or ClusterRole by its name. Helm template enabled."
                      },
                      "kind": {
                        "type": "string",
                        "description": "The kind of the referenced object. Supported values: Role, ClusterRole.",
                        "enum": [
                          "Role",
                          "ClusterRole"
                        ]
                      }
                    },
                    "oneOf": [
                      {
                        "required": [
                          "identifier"
                        ]
                      },
                      {
                        "required": [
                          "name",
                          "kind"
                        ]
                      }
                    ]
                  },
                  "subjects": {
                    "type": "array",
                    "description": "Set the subjects for the RoleBinding or ClusterRoleBinding.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "identifier": {
                          "type": "string",
                          "description": "Reference a serviceAccount configured in this chart by its key."
                        },
                        "name": {
                          "type": "string",
                          "description": "Reference an subject by its name."
                        },
                        "kind": {
                          "type": "string",
                          "description": "The kind of the referenced subject. Supported values: ServiceAccount, User, Group."
                        },
                        "namespace": {
                          "type": "string",
                          "description": "The namespace of the referenced subject. Do not define if kind is User or Group."
                        }
                      },
                      "oneOf": [
                        {
                          "required": [
                            "identifier"
                          ]
                        },
                        {
                          "required": [
                            "name",
                            "kind"
                          ]
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "type",
                  "roleRef",
                  "subjects"
                ]
              }
            ]
          }
        }
      },
      "additionalProperties": false
    },
    "rawResources": {
      "description": "Allows for the inclusion of raw Kubernetes resources that are not supported by the chart otherwise​",
      "type": "object",
      "additionalProperties": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "forceRename": {
                "description": "Override the default resource name. Mutually exclusive with prefix and suffix.",
                "type": "string"
              },
              "prefix": {
                "description": "Prefix to prepend to the resource name. Mutually exclusive with forceRename.",
                "type": "string",
                "default": ""
              },
              "suffix": {
                "description": "Suffix to append to the resource name. Defaults to the resource identifier if there are multiple items, otherwise empty. Mutually exclusive with forceRename.",
                "type": "string"
              }
            },
            "not": {
              "anyOf": [
                {
                  "required": [
                    "forceRename",
                    "suffix"
                  ]
                },
                {
                  "required": [
                    "forceRename",
                    "prefix"
                  ]
                }
              ]
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "forceRename": {},
              "prefix": {},
              "suffix": {},
              "enabled": {
                "description": "Set to false to disable the resource.",
                "type": "boolean",
                "default": true
              },
              "apiVersion": {
                "description": "apiVersion of the resource.",
                "type": "string"
              },
              "kind": {
                "description": "Kind of the resource.",
                "type": "string"
              },
              "annotations": {
                "description": "Annotations to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "labels": {
                "description": "Labels to set on the item.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "spec": {
                "description": "Contents of the raw resource to be rendered."
              }
            },
            "required": [
              "apiVersion",
              "kind",
              "spec"
            ]
          }
        ]
      }
    }
  }
}