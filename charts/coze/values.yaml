# Default values for opencoze.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

mysql:
  enabled: true
  port: 3306
  targetPort: 3306
  image:
    repository: mysql.image
    tag: mysql.image.tag
  rootPassword: "root"
  database: opencoze
  user: coze
  password: coze123
  persistence:
    storageClassName: cloudapp.storageClassName
    size: "50Gi"
  initScripts:
    - files/mysql/schema.sql

oceanbase:
  enabled: false
  port: 2881
  targetPort: 2881
  clusterName: 'cozeai'
  clusterId: 1
  image:
    repository: oceanbase.image
    tag: oceanbase.image.tag
  obAgentVersion: '4.2.2-100000042024011120'
  monitorEnabled: true
  storageClass: ''
  observerConfig:
    resource:
      cpu: 2
      memory: 8Gi
    storages:
      dataStorage: 30Gi
      redoLogStorage: 30Gi
      logStorage: 20Gi
  monitorResource:
    cpu: 100m
    memory: 256Mi
  generateUserSecrets: true
  userSecrets:
    root: 'coze123'
    monitor: 'coze123'
    operator: 'coze123'
    proxyro: 'coze123'
  topology:
    - zone: zone1
      replica: 1
  parameters:
    - name: system_memory
      value: '2G'
    - name: '__min_full_resource_pool_memory'
      value: '2147483648'
  annotations: {}
  backupVolumeEnabled: false

redis:
  enabled: true
  image:
    repository: redis.image
    tag: redis.image.tag
  aofEnabled: "no"
  port: 6379
  ioThreads: 4
  allowEmptyPassword: "yes"
  password: ""
  persistence:
    storageClassName: cloudapp.storageClassName
    size: "50Gi"

# -- coze-server configuration
cozeServer:
  enabled: true
  # -- Number of replicas for the coze-server deployment
  replicaCount: 1

  image:
    repository: app.image
    # -- Keep the mirror up to date
    pullPolicy: Always
    tag: app.image.tag

  service:
    type: LoadBalancer
    ports:
      - name: http
        port: 8888
        targetPort: 8888
      - name: minio-proxy
        port: 8889
        targetPort: 8889

  env:
    LISTEN_ADDR: ":8888"
    SERVER_HOST: "localhost${LISTEN_ADDR}"
    LOG_LEVEL: "debug"
    MAX_REQUEST_BODY_SIZE: "1073741824"
    STORAGE_TYPE: "minio"
    MINIO_PROXY_ENDPOINT: ":8889"
    COZE_MQ_TYPE: rmq
    ES_VERSION: "v8"
    VECTOR_STORE_TYPE: "milvus"
    EMBEDDING_TYPE: "openai"
    ARK_EMBEDDING_MODEL: ""
    ARK_EMBEDDING_DIMS: "1024"
    ARK_EMBEDDING_BASE_URL: ""
    FILE_UPLOAD_COMPONENT_TYPE: "storage"
    OPENAI_EMBEDDING_BASE_URL: "https://dashscope.aliyuncs.com/compatible-mode/v1"
    OPENAI_EMBEDDING_MODEL: "text-embedding-v1"
    OPENAI_EMBEDDING_API_KEY: ""  # 请替换为您的阿里云API密钥
    OPENAI_EMBEDDING_BY_AZURE: "false"
    OPENAI_EMBEDDING_DIMS: "1024"
    OCR_TYPE: "ve"
    VE_OCR_AK: ""
    VE_OCR_SK: ""
    BUILTIN_CM_TYPE: "openai"
    BUILTIN_CM_ARK_API_KEY: ""
    BUILTIN_CM_ARK_MODEL: ""
    BUILTIN_CM_ARK_BASE_URL: ""
    BUILTIN_CM_OPENAI_BASE_URL: "https://dashscope.aliyuncs.com/compatible-mode/v1"
    BUILTIN_CM_OPENAI_API_KEY: ""  # 请替换为您的阿里云API密钥
    BUILTIN_CM_OPENAI_BY_AZURE: "false"
    BUILTIN_CM_OPENAI_MODEL: "qwen-plus"  # 您也可以选择qwen-max或qwen-turbo
    VE_IMAGEX_AK: ""
    VE_IMAGEX_SK: ""
    VE_IMAGEX_SERVER_ID: ""
    VE_IMAGEX_DOMAIN: ""
    VE_IMAGEX_TEMPLATE: ""
    VE_IMAGEX_UPLOAD_HOST: "https://imagex.volcengineapi.com"

rocketmq:
  enabled: true
  namesrv:
    replicaCount: 1
    image:
      repository: rocketmq.image
      tag: rocketmq.image.tag
    persistence:
      store:
        storageClassName: cloudapp.storageClassName
        size: "20Gi"
      logs:
        storageClassName: cloudapp.storageClassName
        size: "20Gi"
    resources:
      requests:
        cpu: "1"
        memory: 2Gi
    livenessProbe:
      exec:
        command: ["sh", "-c", "mqadmin clusterList -n localhost:9876"]
      initialDelaySeconds: 30
      periodSeconds: 10
  topics:
    - opencoze_knowledge
    - opencoze_search_app
    - opencoze_search_resource
    - "%RETRY%cg_knowledge"
    - "%RETRY%cg_search_app"
    - "%RETRY%cg_search_resource"
  consumerGroups:
    - cg_knowledge
    - cg_search_app
    - cg_search_resource
  broker:
    replicaCount: 1
    image:
      repository: rocketmq.image
      tag: rocketmq.image.tag
    config: |
      brokerClusterName = DefaultCluster
      brokerName = broker-a
      brokerId = 0
      deleteWhen = 04
      fileReservedTime = 48
      brokerRole = ASYNC_MASTER
      flushDiskType = ASYNC_FLUSH
    persistence:
      store:
        storageClassName: cloudapp.storageClassName
        size: "20Gi"
      logs:
        storageClassName: cloudapp.storageClassName
        size: "20Gi"
    resources:
      requests:
        cpu: "1"
        memory: 2Gi
    initContainers:
      - name: wait-for-namesrv
        image: busybox.image
        command: ['sh', '-c', 'until nc -z rocketmq-namesrv 9876; do echo waiting for namesrv; sleep 2; done']

elasticsearch:
  enabled: true
  image:
    repository: elasticsearch.image
    tag: elasticsearch.image.tag
  javaOpts: "-Djdk.tls.client.protocols=TLSv1.2 -Dhttps.protocols=TLSv1.2 -Djavax.net.ssl.trustAll=true -Xms4096m -Xmx4096m"
  username: ""
  password: ""
  persistence:
    enabled: true
    storageClassName: cloudapp.storageClassName
    accessModes:
      - ReadWriteOnce
    size: 50Gi
  service:
    type: ClusterIP
    port: 9200
    targetPort: 9200

minio:
  enabled: true
  image:
    repository: minio.image
    tag: minio.image.tag
  accessKey: minioadmin
  secretKey: minioadmin123
  bucket: opencoze
  service:
    type: ClusterIP
    port: 9000
    consolePort: 9001
  persistence:
    storageClassName: cloudapp.storageClassName
    size: "50Gi"
  resources:
    limits:
      cpu: 8000m
      memory: 16Gi
    requests:
      cpu: "1"
      memory: 2Gi

etcd:
  enabled: true
  image:
    repository: etcd.image
    tag: etcd.image.tag
  persistence:
    storageClassName: cloudapp.storageClassName
    size: "20Gi"

milvus:
  enabled: true
  image:
    repository: milvus.image
    tag: milvus.image.tag
  bucketName: milvus
  persistence:
    storageClassName: cloudapp.storageClassName
    size: "20Gi"


images:
  busybox: busybox.image
  curl: busybox.image.tag


# -- We will add other services like mysql, redis etc. here later

# This is to override the chart name.
nameOverride: ''
fullnameOverride: ''

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
